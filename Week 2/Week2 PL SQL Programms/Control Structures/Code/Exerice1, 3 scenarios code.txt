CREATE DATABASE java_deepskillg;
USE java_deepskillg;
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    DOB DATE,
    Balance DECIMAL(10,2),
    LastModified DATE
);
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY,
    CustomerID INT,
    AccountType VARCHAR(20),
    Balance DECIMAL(10,2),
    LastModified DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
CREATE TABLE Transactions (
    TransactionID INT PRIMARY KEY,
    AccountID INT,
    TransactionDate DATE,
    Amount DECIMAL(10,2),
    TransactionType VARCHAR(10),
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)
);
CREATE TABLE Loans (
    LoanID INT PRIMARY KEY,
    CustomerID INT,
    LoanAmount DECIMAL(10,2),
    InterestRate DECIMAL(5,2),
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(100),
    Position VARCHAR(50),
    Salary DECIMAL(10,2),
    Department VARCHAR(50),
    HireDate DATE
);
INSERT INTO Customers VALUES 
(1, 'John Doe', '1985-05-15', 1000.00, CURDATE()),
(2, 'Jane Smith', '1990-07-20', 1500.00, CURDATE());
INSERT INTO Accounts VALUES 
(1, 1, 'Savings', 1000.00, CURDATE()),
(2, 2, 'Checking', 1500.00, CURDATE());
INSERT INTO Transactions VALUES 
(1, 1, CURDATE(), 200.00, 'Deposit'),
(2, 2, CURDATE(), 300.00, 'Withdrawal');
INSERT INTO Loans VALUES 
(1, 1, 5000.00, 5.00, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 60 MONTH));
INSERT INTO Employees VALUES 
(1, 'Alice Johnson', 'Manager', 70000.00, 'HR', '2015-06-15'),
(2, 'Bob Brown', 'Developer', 60000.00, 'IT', '2017-03-20');
DELIMITER //

CREATE PROCEDURE ApplySeniorDiscount()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE cust_id INT;

    DECLARE cur CURSOR FOR
        SELECT CustomerID 
        FROM Customers 
        WHERE TIMESTAMPDIFF(YEAR, DOB, CURDATE()) > 60;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO cust_id;

        IF done THEN
            LEAVE read_loop;
        END IF;

        UPDATE Loans
        SET InterestRate = InterestRate - 1
        WHERE CustomerID = cust_id;
    END LOOP;

    CLOSE cur;
END;
//

DELIMITER ;
CALL ApplySeniorDiscount();
DELIMITER //

CREATE PROCEDURE PromoteVIPs()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE cust_id INT;
    DECLARE balance DECIMAL(10,2);

    DECLARE cur CURSOR FOR
        SELECT CustomerID, Balance FROM Customers;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO cust_id, balance;

        IF done THEN
            LEAVE read_loop;
        END IF;

        IF balance > 10000 THEN
            UPDATE Customers
            SET LastModified = CURDATE() -- using LastModified as an example flag
            WHERE CustomerID = cust_id;
        END IF;
    END LOOP;

    CLOSE cur;
END;
//

DELIMITER ;
CALL PromoteVIPs();
DELIMITER //

CREATE PROCEDURE LoanReminder()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE cust_name VARCHAR(100);
    DECLARE loan_id INT;
    DECLARE due_date DATE;

    DECLARE cur CURSOR FOR
        SELECT C.Name, L.LoanID, L.EndDate
        FROM Loans L
        JOIN Customers C ON L.CustomerID = C.CustomerID
        WHERE L.EndDate BETWEEN CURDATE() AND CURDATE() + INTERVAL 30 DAY;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO cust_name, loan_id, due_date;

        IF done THEN
            LEAVE read_loop;
        END IF;

        SELECT CONCAT('Reminder: ', cust_name, ', your loan #', loan_id, 
                      ' is due on ', DATE_FORMAT(due_date, '%d-%b-%Y')) AS Reminder;
    END LOOP;

    CLOSE cur;
END;
//

DELIMITER ;
CALL LoanReminder();
SELECT LoanID, CustomerID, EndDate 
FROM Loans 
WHERE EndDate BETWEEN CURDATE() AND CURDATE() + INTERVAL 30 DAY;
UPDATE Loans
SET EndDate = CURDATE() + INTERVAL 10 DAY
WHERE LoanID = 1;
CALL LoanReminder();
USE java_deepskillg;
CALL LoanReminder();
CALL PromoteVIPs();